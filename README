InPlaceReplace
==============

Test project to play around with renaming variables in life-C++ code. It is
using the LLVM/clang based refactoring library, tooling in clang-parlance.

What works so far is using ASTMatchers to find and locate a specific struct. Not
in all intended cases, yet. But got me a basic understanding of all this. More
to come.

For more details, look here:
- http://clang.llvm.org/docs/LibASTMatchersReference.html
also the "clang-tools-extra" git-repository is good to know:
- https://github.com/loarabia/Clang-tutorial
these might be autogenerated (and are quite extensice!):
- http://clang.llvm.org/docs/index.html

Usage
-----

There are two CMake-based projects (InPlaceReplace and UseCase). They are
intended to reflect the later use case, and are relatively specific. The usage can be
coordinated by a basic makefile here in this directory. Just to:

{{{
    make execute
}}}

To do the complete chain:

1) compiling the InPlaceReplace and UseCase-application (actually compiling
   the second is not needed because of the compile_commands.json generated by
   CMake. But nice to know that it works)
2) running InPlaceReplace to do the (hardcoded) work
3) display the git diff...

For more targets see in the Makefile

LLVM/clang setup
================

the current HEAD is tested against llvm+clang-3.3 from Debian stable. Using your
own compilation is not tested...

roll-your-own
-------------

To prepare the whole library infrastructure apply these commands:

{{{
    BRANCH=release_33
    git clone http://llvm.org/git/llvm.git $HOME/llvm.git --branch $BRANCH
    git clone http://llvm.org/git/clang.git $HOME/llvm.git/tools/clang --branch $BRANCH
    git clone http://llvm.org/git/clang-tools-extra.git $HOME/llvm.git/tools/clang/tools/extra --branch $BRANCH
    mkdir -p $HOME/llvm.git/build_cmake && cd $HOME/llvm.git/build_cmake
    cmake .. \
            -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON \
            -DCMAKE_INSTALL_PREFIX:PATH="$HOME/llvm.install \
            -DCMAKE_BUILD_TYPE="Release"

    make -j`getconf _NPROCESSORS_ONLN` check-all install
}}}

In your shell, source the file env.sh to even compile using clang

Tipps
=====

This nitpick might be sometimes helpful:

{{{
    $ clang-check -ast-dump -ast-dump-filter plotz::tree -p UseCase/build/x86_64-unknown-linux-gnu UseCase/src/bar.cpp
}}}
