InPlaceReplace
==============

test project to play around with renaming variables in life-c++ code.  it is
using the LLVM/clang based refactoring library, tooling in clang-parlance.

what works so far is using ASTMatchers to find and locate a specific struct. not
in all intended cases, yet. but got me a basic understanding of all this. more
to come.

for more details, look here http://clang.llvm.org/docs/LibASTMatchersReference.html
also the "clang-tools-extra" git-repository is good to know.

usage
-----

there are two cmake-based projects (InPlaceReplace and UseCase). they are
intended to reflect the later usecase, and are relatively specific. the usage can be
coordinated by a basic makefile here in this dir. just to:

{{{
    make execute
}}}

to do the compete chain:

1) compiling the InPlaceReplace and UseCase-application (actually compiling the second is
   not needed because of the compile_commands.json generated by cmake)
2) running InPlaceReplace to do the (hardcoded) work
3) display the git diff...

for more targets see in the Makefile

LLVM/clang setup
================

to prepare the whole library infrastructure apply these commands:

{{{
    git clone http://llvm.org/git/llvm.git $HOME/llvm.git
    cd $HOME/llvm.git && git checkout -b clang_complete_32 5cd95e1
    git clone http://llvm.org/git/clang.git $HOME/llvm.git/tools/clang
    cd $HOME/llvm.git/tools/clang && git checkout -b clang_complete_32 9903e94
    git clone http://llvm.org/git/clang-tools-extra.git $HOME/llvm.git/tools/clang/tools/extra
    mkdir -p $HOME/llvm.git/build && cd $HOME/llvm.git/build
    ../configure --prefix=$HOME/llvm.install --enable-optimized --disable-assertions --enable-targets=host-only

    make -j`getconf _NPROCESSORS_ONLN` install
}}}

source the file env.sh to even compile using clang

Python
======

there are relicts in the directory "python". scripts which worked for basic
showcases (renaming a namespace and a variable) but it lacked a nice access to
the actually usefull stuff. they are there as a record.
